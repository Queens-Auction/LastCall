name: CI (Build & Test)

on:
  pull_request:
    branches: [ "dev" ]

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: ap-northeast-2
  ACCOUNT_ID: ${{ secrets.ACCOUNT_ID }}
  ECR_REPO: ${{ secrets.ECR_REPO }}
  IMAGE_TAG: ${{ github.sha }}
  EC2_INSTANCE_ID: ${{ secrets.EC2_INSTANCE_ID }}
  CONTAINER_NAME: app
  APP_PORT: "8080"
  SPRING_PROFILE: dev

jobs:
  deploy:
    runs-on: ubuntu-latest
    concurrency:
      group: deploy-dev
      cancel-in-progress: true

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Make scripts executable
        run: chmod +x scripts/*.sh

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ env.ACCOUNT_ID }}:role/github-oidc-role
          aws-region: ${{ env.AWS_REGION }}

      - name: Build & Push to ECR
        id: push
        run: |
          ./scripts/ecr-push.sh
        # ecr-push.sh가 FULL_URI를 $GITHUB_OUTPUT에 기록함

      - name: Deploy on EC2 via SSM
        env:
          FULL_URI: ${{ steps.push.outputs.FULL_URI }}
        run: |
          ./scripts/deploy.sh

      - name: Verify container
        run: |
          aws ssm send-command \
            --document-name "AWS-RunShellScript" \
            --targets "Key=instanceIds,Values=${EC2_INSTANCE_ID}" \
            --parameters commands="[
              \"docker ps --format 'table {{.Names}}\\t{{.Image}}\\t{{.Status}}'\"
            ]" \
            --region $AWS_REGION --output json
  build-test:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8
        env:
          MYSQL_ROOT_PASSWORD: ${{ secrets.DB_PASSWORD }}
          MYSQL_DATABASE: auction
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -h 127.0.0.1"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=10
      mailhog:
        image: mailhog/mailhog:latest
        ports:
          - 1025:1025   # SMTP
          - 8025:8025   # Web UI (디버깅용, 테스트에는 불필요)

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: Cache Gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build (tests included)
        env:
          SPRING_PROFILES_ACTIVE: local
          # DB
          SPRING_DATASOURCE_URL: jdbc:mysql://127.0.0.1:3306/auction?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=Asia/Seoul
          SPRING_DATASOURCE_USERNAME: root
          SPRING_DATASOURCE_PASSWORD: ${{ secrets.DB_PASSWORD }}
          # MAIL (MailHog)
          SPRING_MAIL_HOST: 127.0.0.1
          SPRING_MAIL_PORT: 1025
          SPRING_MAIL_PROPERTIES_MAIL_SMTP_AUTH: false
          SPRING_MAIL_PROPERTIES_MAIL_SMTP_STARTTLS_ENABLE: false
          # JWT
          JWT_SECRET: ${{  secrets.JWT_SECRET }}
          JWT_EXPIRATION: 86400000
        run: ./gradlew clean build --no-daemon
